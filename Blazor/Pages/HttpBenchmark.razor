@page "/http"
@using Blazor.Models.Enums
@using Blazor.Services.Interfaces
@using System.Diagnostics
@inject IHttpBenchmarkService HttpBenchmarkService;
@implements Blazor.Abstract.IBenchmarkComponentBase

<BaseBenchmark Child="@this">
    <b class="benchmark-base__flex">
        Wybór testu:
    </b>
    <div class="benchmark-base__flex">
        <button type="button"
                class="@GetButtonClass(HttpTest.Get)"
                @onclick="() => SelectTest(HttpTest.Get)">GET</button>
        <button type="button"
                class="@GetButtonClass(HttpTest.Post)" 
                @onclick="() => SelectTest(HttpTest.Post)">POST</button>
    </div>
    <hr />
</BaseBenchmark>

    @code {
        public string Name => "Test komunikacji HTTP";
        private HttpTest _activeTest = HttpTest.Get;
        private long _nanosecPerTick = (1000L * 1000L * 1000L) / Stopwatch.Frequency;

        public async Task SetupTest()
        {
            return;
        }

        public async Task<decimal> RunTest()
        {
            DateTime startTime;
            DateTime endTime;
            switch (_activeTest)
            {
                case HttpTest.Get:
                    var sw = Stopwatch.StartNew();
                    await HttpBenchmarkService.Get();
                    sw.Stop();
                    return (decimal)((sw.ElapsedTicks * (double)_nanosecPerTick) / 1000000d);
                case HttpTest.Post:
                    var sw2 = Stopwatch.StartNew();
                    await HttpBenchmarkService.Post();
                    sw2.Stop();
                    return (decimal)((sw2.ElapsedTicks * (double)_nanosecPerTick) / 1000000d);
            }
            throw new InvalidOperationException();
        }

        public void SelectTest(HttpTest test)
        {
            _activeTest = test;
        }

        public string GetButtonClass(HttpTest test)
        {
            return $"btn {(_activeTest == test ? "btn-success" : "btn-secondary")}";
        }
    }
