@page "/dom"
@using Blazor.Models.Forms
@using Blazor.Models.Enums
@using System.Diagnostics
@inject IJSRuntime JS
@implements Blazor.Abstract.IBenchmarkComponentBase

<BaseBenchmark Child="@this">
    <h3 class="benchmark-base__flex">
        Parametry testu:
    </h3>
    <div class="benchmark-base__flex">
        <EditForm Model="@_formModel">
            <label>
                Liczba elementów:
                <InputNumber id="number-of-elements-control" @bind-Value="@_formModel.NumberOfElements" />
            </label>
        </EditForm>
    </div>
    <b class="benchmark-base__flex">
        Wybór testu:
    </b>
    <div class="benchmark-base__flex">
        <button type="button" 
                class="@GetButtonClass(DomTest.Append)" 
                @onclick="() => SelectTest(DomTest.Append)">Dodawanie elementów</button>
        <button type="button" 
                class="@GetButtonClass(DomTest.Remove)" 
                @onclick="() => SelectTest(DomTest.Remove)">Usuwanie elementów</button>
    </div>
    <hr />
    <div id="scratchpad"></div>
</BaseBenchmark>

@code {
    public string Name => "Test manipulacji DOM";
    private DomBenchmarkForm _formModel = new ();
    private DomTest _activeTest = DomTest.Append;

    public void SelectTest(DomTest test)
    {
        _activeTest = test;
    }

    public string GetButtonClass(DomTest test)
    {
        return $"btn {(_activeTest == test ? "btn-success" : "btn-secondary")}";
    }

    public async Task SetupTest()
    {
        switch (_activeTest)
        {
            case DomTest.Append:
                await RemoveAllFromScratchpad();
                break;
            case DomTest.Remove:
                await AddToScratchPad();
                break;
        }
    }

    public async Task<decimal> RunTest()
    {
        switch (_activeTest)
        {
            case DomTest.Append:
                return await AddToScratchPad();
            case DomTest.Remove:
                return await RemoveAllFromScratchpad();
        }
        throw new InvalidOperationException();
    }

    private async Task<decimal> RemoveAllFromScratchpad()
    {
        return await JS.InvokeAsync<decimal>("removeNodes");
    }

    private async Task<decimal> AddToScratchPad()
    {
        return await JS.InvokeAsync<decimal>("appendNodes", _formModel.NumberOfElements);
    }
}
